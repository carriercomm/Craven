#pragma once

#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>

namespace po = boost::program_options;

//! Namespace for exceptions generated by bad expansions.
namespace expansion
{
	//! Factory for the exception classes in this namespace.
	std::runtime_error factory(int err);

	//! Base class of the expansion errors.
	struct expansion_error : std::runtime_error
	{
		explicit expansion_error(std::string const& what_arg);
		explicit expansion_error(const char* what_arg);
	};

	//! Thrown on an illegal occurrence of newline or one of |&;<>(){}
	struct badchar : expansion_error
	{
		badchar();
	};

	//! Thrown when an undefined shell variable is referenced.
	//! Note this is only considered an error if configured to reject these.
	struct badval : expansion_error
	{
		badval();
	};

	//! Thrown when a command substitution occurred
	//! Note this is only thrown if configured to do so.
	struct cmdsub : expansion_error
	{
		cmdsub();
	};

	//! Out of memory
	struct nospace : expansion_error
	{
		nospace();
	};

	//!	Thrown on a syntax error
	struct syntax : expansion_error
	{
		syntax();
	};

	//! Thrown when no expansions are produced.
	struct noexpand : expansion_error
	{
		noexpand();
	};
}

//! Exception thrown when a provided configuration is invalid
class invalid_config : public std::runtime_error
{
public:
	//! Constructor for this exception.
	//! \param msg Passed through to std::runtime_error
	explicit invalid_config(const std::string & msg);
	explicit invalid_config(const char* msg);
};

//! Class for configuration code shared by the cli and daemon
class Configure
{
public:
	//! Constructor for the generic configuration class.
	/*!
	 * \param argc The number of arguments in argv (pass through from main).
	 * \param argv An array of c-style strings (pass through from main).
	 */
	Configure(int argc, char ** argv);


protected:
	//! Parse command for the use of the classes.
	/*! This command should be run by a child class after it has set up all
	 *  options it desires.
	 *
	 *  Uses cli_ and all_ to parse argv_ (with argc_) and places the result in
	 *  vm_.
	 *
	 *  \param usage The usage message to display.
	 */
	void parse(const std::string& usage);

	//! Expand shell-like things in paths
	/*!
	 * Note that this is probably passed back to the shell in the background;
	 * it performs tilde, shell-variable and command substitution. So: make
	 * world-readable your config at your peril!
	 *
	 * If multiple paths turn up, this will return the first.
	 *
	 * \param path The path to expand.
	 * \return The expanded path.
	 */
	boost::filesystem::path expand(boost::filesystem::path const& path) const;


	//! Command-line--only options
	po::options_description cli_;

	//! Command-line and rc file options
	po::options_description all_;

	//! Hidden cli options
	po::options_description hidden_;

	//! Positional options
	po::positional_options_description pos_;

	//! Results of parse
	po::variables_map vm_;

	//! Number of command-line options
	int argc_;

	//! Command-line arguments
	char ** argv_;

	//! Path to the rc file
	boost::filesystem::path rc_file_;
};
